/*
* Base pixel for all REM/EM calcs
*/ 
$base_px: 16 !default; 

/* 	
* Function for return value with a new unit 
* (or null if no value)
*/
@function setUnit($value, $unit) {
	@if $value {
		@return #{$value}$unit;
	}
	@return null;
}

/* 	
* Function for converting pixel values to 
* relative rem value
* @param $context_px optional parameter for context font-size 
* --moz-device-pixel-ratiouses $base_px size as default 
*
*/
@function pxToRem($target_px: null, $context_px: $base_px) {
	@if $target_px {
 	  @return setUnit( ($target_px / $context_px),  rem);
 	}
 	@return null;
}

/* 	
* Mixin for writing out a property with a 
* rem value and a px fallback
*/
@mixin pxToRem($prop, $first, $second: null, $third: null, $fourth: null) {
	#{$prop}: pxToRem($first) pxToRem($second) pxToRem($third) pxToRem($fourth);
}

/* 	
* Function for ceonverting pixel values to relative rem value
* 
* @param $context_px optional parameter for context font-size 
* --moz-device-pixel-ratiouses $base_px size as default 
*
*/
@function pxToEm($target_px, $context_px: $base_px) {
	@if $target_px {
	  @return setUnit( ($target_px / $context_px), em);
	}
  	@return null;
}

/* 	
 *	Mixin for writing out a property with an em value and a px fallback
 */
@mixin pxToEm($prop, $first, $second: null, $third: null, $fourth: null, $context_px: $base_px) {
	#{$prop}: pxToEm($first, $context_px) pxToEm($second, $context_px) pxToEm($third, $context_px) pxToEm($fourth, $context_px);
}


/*	
* Function to output a future proof min-resolution media query
*
* Inspired by:
*		- http://alwaystwisted.com/post.php?s=2012-08-06-a-mixin-for-media-queries-and-ie
*		- http://www.w3.org/blog/CSS/2012/06/14/unprefix-webkit-device-pixel-ratio/
*		- http://css-tricks.com/snippets/css/retina-display-media-query/
*/
@mixin if-resolution($prefix, $dppx) {
	// 1px = 96dpi
	$dpi: $dppx * 96;
	@media
		(-webkit-#{$prefix}-device-pixel-ratio: #{$dppx}),
		(   #{$prefix}--moz-device-pixel-ratio: #{$dppx}),
		(     -o-#{$prefix}-device-pixel-ratio: #{$dppx*2}/2),
		(        #{$prefix}-device-pixel-ratio: #{$dppx}),
		(                #{$prefix}-resolution: #{$dpi}dpi),
		(                #{$prefix}-resolution: #{$dppx}dppx) { 
	  	@content;
  }
}
@mixin if-min-resolution($dppx) {
	@include if-resolution(min, $dppx) {
		@content;
	}
}
@mixin if-max-resolution($dppx) {
	@include if-resolution(max, $dppx) {
		@content;
	}
}

/*	
* Clearfix mixin
*
* credit: H5BP Clearfix
*/
@mixin clearfix() {
	&:before,
	&:after {
		content:"";
		display:table;
	}
	&:after {
		clear:both;
	}
	*zoom: 1;
}

.hidden {
	display: none;
}

.visually-hidden {
	visibility: hidden;
}

